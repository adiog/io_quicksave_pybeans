# This file is an AUTOGENERATED part of beans project.
# Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

import quicksave_pybeans.pybeans


@quicksave_pybeans.pybeans.register_bean_spec('Meta', '''
{
  "meta_hash": "Optional(String)",
  "user_hash": "Optional(String)",
  "meta_type": "Optional(String)",
  "icon": "Optional(String)",
  "name": "Optional(String)",
  "text": "Optional(String)",
  "author": "Optional(String)",
  "source_title": "Optional(String)",
  "source_url": "Optional(String)",
  "created_at": "Optional(String)",
  "modified_at": "Optional(String)"
}

''')
class MetaBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('UploadRequest', '''
{
  "meta_hash": "String",
  "filename": "String",
  "mimetype": "String",
  "filebase": "Base64"
}
''')
class UploadRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('File', '''
{
  "file_hash": "Optional(String)",
  "meta_hash": "String",
  "filename": "String",
  "filesize": "Int",
  "mimetype": "String"
}
''')
class FileBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('Tag', '''
{
  "tag_hash": "Optional(String)",
  "user_hash": "Optional(String)",
  "meta_hash": "Optional(String)",
  "name": "Optional(String)",
  "value": "Optional(String)"
}

''')
class TagBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('RetrieveByQueryRequest', '''
{
  "query": "String",
  "limit": "Optional(Int)",
  "offset": "Optional(Int)"
}
''')
class RetrieveByQueryRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('Key', '''
{
  "key_hash": "Optional(String)",
  "user_hash": "String",
  "name": "String",
  "value": "String"
}
''')
class KeyBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('PerspectiveRetrieveRequest', '''
{
  "variant": "String",
  "perspective_hash": "Optional(List(String))"
}
''')
class PerspectiveRetrieveRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('Token', '''
{
  "token": "String"
}

''')
class TokenBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('User', '''
{
  "user_hash": "Optional(String)",
  "username": "String",
  "password": "String",
  "databaseConnectionString": "String",
  "storageConnectionString": "String"
}

''')
class UserBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('PerspectiveDeleteRequest', '''
{
  "perspective_hash": "String"
}

''')
class PerspectiveDeleteRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('RetrieveByPerspectiveRequest', '''
{
  "perspective_hash": "String",
  "limit": "Optional(Int)",
  "offset": "Optional(Int)"
}
''')
class RetrieveByPerspectiveRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('MetaDeleteRequest', '''
{
  "meta_hash": "String"
}

''')
class MetaDeleteRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('Perspective', '''
{
  "perspective_hash": "Optional(String)",
  "user_hash": "Optional(String)",
  "name": "String",
  "defined_query": "String",
  "refined_query": "Optional(String)",
  "ordering": "Optional(String)"
}
''')
class PerspectiveBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('TagDeleteRequest', '''
{
  "tag_hash": "String"
}

''')
class TagDeleteRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('DatabaseTask', '''
{
  "databaseConnectionString": "String",
  "type": "String",
  "beanname": "String",
  "beanjson": "SerializedDict"
}

''')
class DatabaseTaskBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('Message', '''
{
  "message": "String"
}

''')
class MessageBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('TokenRequest', '''
{
  "expireTime": "Int"
}

''')
class TokenRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('MessageWithHash', '''
{
  "hash": "String",
  "message": "String"
}

''')
class MessageWithHashBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('Action', '''
{
  "action_hash": "Optional(String)",
  "meta_hash": "String",
  "name": "String",
  "kwargs": "SerializedDict"
}
''')
class ActionBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('CreateRequest', '''
{
  "meta": "Meta",
  "attachment": "Optional(Base64)",
  "attachment_name": "Optional(String)",
  "attachment_mime_types": "Optional(List(String))",
  "attachment_provider_id": "Optional(Int)",
  "hints": "Optional(String)"
}

''')
class CreateRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('PerspectiveCreateRequest', '''
{
  "perspective": "Perspective"
}

''')
class PerspectiveCreateRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('TagCreateRequest', '''
{
  "tag": "Tag"
}

''')
class TagCreateRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('TagUpdateRequest', '''
{
  "tag": "Tag"
}

''')
class TagUpdateRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('Session', '''
{
  "token": "String",
  "user": "User"
}

''')
class SessionBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('PerspectiveUpdateRequest', '''
{
  "perspective": "Perspective",
  "ordering": "Optional(List(String))"
}

''')
class PerspectiveUpdateRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('Item', '''
{
  "meta": "Meta",
  "tags": "List(Tag)",
  "files": "List(File)",
  "actions": "List(Action)"
}

''')
class ItemBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('MetaUpdateRequest', '''
{
  "meta": "Meta"
}

''')
class MetaUpdateRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('PerspectiveRetrieveResponse', '''
{
  "perspectives": "List(Perspective)"
}
''')
class PerspectiveRetrieveResponseBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('RetrieveResponse', '''
{
  "items": "List(Item)",
  "total": "Int"
}

''')
class RetrieveResponseBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('CreateResponse', '''
{
  "item": "Item"
}

''')
class CreateResponseBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('InternalCreateRequest', '''
{
  "createRequest": "CreateRequest",
  "keys": "List(Key)",
  "databaseConnectionString": "String",
  "storageConnectionString": "String"
}

''')
class InternalCreateRequestBean(quicksave_pybeans.pybeans.Bean):
    pass


@quicksave_pybeans.pybeans.register_bean_spec('BackgroundTask', '''
{
  "name": "String",
  "internalCreateRequest": "InternalCreateRequest",
  "kwargs": "SerializedDict"
}
''')
class BackgroundTaskBean(quicksave_pybeans.pybeans.Bean):
    pass

